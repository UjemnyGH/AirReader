#pragma once
#ifndef _CFG_UI_
#define _CFG_UI_

#include <glad/gl.h>
#include <iostream>
#include <vector>

uint32_t gShaderProgram, gVertexArray, gVertexBuffer, gColorBuffer;
int32_t gWindowWidth = 800, gWindowHeight = 600;
double gMouseX, gMouseY;
bool gMouseLeftClicked = false;
uint8_t gButtonColor[3] = {255, 255, 255};

const char* gVertexShader = 
"#version 450 core\n"
"layout(location = 0) in vec4 iPos;\n"
"layout(location = 1) in vec4 iCol;\n"
"out vec4 vCol;\n"
"void main() {\n"
"   gl_Position = iPos;\n"
"   vCol = iCol;\n"
"}\n";

const char* gFragmentShader =
"#version 450 core\n"
"in vec4 vCol;\n"
"out vec4 oCol;\n"
"void main() {\n"
"   oCol = vCol;\n"
"}\n";

const uint16_t gDefaultFont[96][16] = {
    {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000},
    {0x0000, 0x0000, 0x0180, 0x03c0, 0x03c0, 0x03c0, 0x03c0, 0x0180, 0x0180, 0x0180, 0x0180, 0x0000, 0x0180, 0x0180, 0x0000, 0x0000},
    {0x0000, 0x0000, 0x0660, 0x0660, 0x0660, 0x0660, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000},
    {0x0000, 0x0000, 0x1860, 0x1860, 0x1860, 0x3ffc, 0x3ffc, 0x0c30, 0x0618, 0x1ffe, 0x1ffe, 0x030c, 0x030c, 0x030c, 0x0000, 0x0000},
    {0x0000, 0x0180, 0x07e0, 0x0ff0, 0x1998, 0x1198, 0x0198, 0x07f0, 0x0fe0, 0x1980, 0x1988, 0x1998, 0x0ff0, 0x07e0, 0x0180, 0x0000},
    {0x0000, 0x0000, 0x0c18, 0x063c, 0x0666, 0x0366, 0x033c, 0x0198, 0x1980, 0x3cc0, 0x66c0, 0x6660, 0x3c60, 0x1830, 0x0000, 0x0000},
    {0x0000, 0x0000, 0x03c0, 0x07e0, 0x0c30, 0x0c30, 0x0e70, 0x07e0, 0x03e0, 0x47f0, 0x6f18, 0x3e18, 0x1ff0, 0x33e0, 0x6000, 0x0000},
    {0x0000, 0x0000, 0x00c0, 0x00c0, 0x00c0, 0x00c0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000},
    {0x0000, 0x0180, 0x00c0, 0x00c0, 0x0060, 0x0060, 0x0030, 0x0030, 0x0030, 0x0030, 0x0060, 0x0060, 0x00c0, 0x00c0, 0x0180, 0x0000},
    {0x0000, 0x0180, 0x0300, 0x0300, 0x0600, 0x0600, 0x0c00, 0x0c00, 0x0c00, 0x0c00, 0x0600, 0x0600, 0x0300, 0x0300, 0x0180, 0x0000},
    {0x0000, 0x0000, 0x05a0, 0x03c0, 0x03c0, 0x05a0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000},
    {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0180, 0x0180, 0x07e0, 0x07e0, 0x0180, 0x0180, 0x0000, 0x0000, 0x0000, 0x0000},
    {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0180, 0x0180, 0x0100, 0x0080, 0x0000},
    {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x07e0, 0x07e0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000},
    {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0180, 0x0180, 0x0000, 0x0000},
    {0x0000, 0x0300, 0x0300, 0x0300, 0x0380, 0x0180, 0x0180, 0x0180, 0x00c0, 0x00c0, 0x00c0, 0x00e0, 0x0060, 0x0060, 0x0060, 0x0000},
    {0x0000, 0x0000, 0x0180, 0x07e0, 0x0660, 0x0c30, 0x0c30, 0x0c30, 0x0c30, 0x0c30, 0x0c30, 0x0660, 0x07e0, 0x0180, 0x0000, 0x0000},
    {0x0000, 0x0000, 0x0600, 0x0700, 0x0780, 0x06c0, 0x0640, 0x0600, 0x0600, 0x0600, 0x0600, 0x0600, 0x0600, 0x0f00, 0x0000, 0x0000},
    {0x0000, 0x0000, 0x03c0, 0x07e0, 0x0e70, 0x0c30, 0x0e10, 0x0700, 0x0380, 0x01c0, 0x00e0, 0x0060, 0x0ff0, 0x0ff0, 0x0000, 0x0000},
    {0x0000, 0x0000, 0x03c0, 0x07e0, 0x0e70, 0x0c30, 0x0e00, 0x0780, 0x0780, 0x0e00, 0x0c30, 0x0e70, 0x07e0, 0x03c0, 0x0000, 0x0000},
    {0x0000, 0x0000, 0x0380, 0x03c0, 0x03c0, 0x0360, 0x0360, 0x0330, 0x0330, 0x0ff0, 0x0ff0, 0x0300, 0x0300, 0x0300, 0x0000, 0x0000},
    {0x0000, 0x0000, 0x0ff0, 0x0ff0, 0x0c30, 0x0030, 0x03f0, 0x07e0, 0x0e00, 0x0c00, 0x0c00, 0x0e30, 0x07f0, 0x03e0, 0x0000, 0x0000},
    {0x0000, 0x0000, 0x07e0, 0x0ff0, 0x0c30, 0x0030, 0x03f0, 0x07f0, 0x0e70, 0x0c30, 0x0c30, 0x0e70, 0x07e0, 0x03c0, 0x0000, 0x0000},
    {0x0000, 0x0000, 0x0ff0, 0x0ff0, 0x0600, 0x0600, 0x0300, 0x0300, 0x0300, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0000, 0x0000},
    {0x0000, 0x0000, 0x03c0, 0x07e0, 0x0660, 0x0660, 0x03c0, 0x07e0, 0x0e70, 0x0c30, 0x0c30, 0x0e70, 0x07e0, 0x03c0, 0x0000, 0x0000},
    {0x0000, 0x0000, 0x03c0, 0x07e0, 0x0e70, 0x0c30, 0x0c30, 0x0e70, 0x0fe0, 0x0fc0, 0x0c00, 0x0e30, 0x07f0, 0x03e0, 0x0000, 0x0000},
    {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0180, 0x0180, 0x0000, 0x0000, 0x0000, 0x0000, 0x0180, 0x0180, 0x0000, 0x0000, 0x0000},
    {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0180, 0x0180, 0x0000, 0x0000, 0x0000, 0x0000, 0x0180, 0x0180, 0x0100, 0x0080, 0x0000},
    {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0c00, 0x0f00, 0x03c0, 0x00e0, 0x00e0, 0x03c0, 0x0f00, 0x0c00, 0x0000, 0x0000, 0x0000},
    {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x07e0, 0x07e0, 0x0000, 0x0000, 0x07e0, 0x07e0, 0x0000, 0x0000, 0x0000, 0x0000},
    {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0030, 0x00f0, 0x03c0, 0x0700, 0x0700, 0x03c0, 0x00f0, 0x0030, 0x0000, 0x0000, 0x0000},
    {0x0000, 0x0000, 0x03c0, 0x07e0, 0x0660, 0x0660, 0x0700, 0x0300, 0x0180, 0x0180, 0x0180, 0x0000, 0x0180, 0x0180, 0x0000, 0x0000},
    {0x0000, 0x0ff0, 0x1ff8, 0x300c, 0x66e6, 0x67f6, 0x6736, 0x3636, 0x3736, 0x37f6, 0x0ee6, 0x2006, 0x300c, 0x1ff8, 0x0ff0, 0x0000},
    {0x0000, 0x0000, 0x0180, 0x03c0, 0x07e0, 0x0c30, 0x0c30, 0x0c30, 0x0c30, 0x0ff0, 0x0ff0, 0x0c30, 0x0c30, 0x0c30, 0x0000, 0x0000},
    {0x0000, 0x0000, 0x01f0, 0x07f0, 0x0e30, 0x0c30, 0x0e30, 0x07f0, 0x07f0, 0x0e30, 0x0c30, 0x0e30, 0x07f0, 0x01f0, 0x0000, 0x0000},
    {0x0000, 0x0000, 0x0780, 0x0fc0, 0x0ce0, 0x0860, 0x0030, 0x0030, 0x0030, 0x0030, 0x0860, 0x0ce0, 0x0fc0, 0x0780, 0x0000, 0x0000},
    {0x0000, 0x0000, 0x01f0, 0x07f0, 0x0e30, 0x0c30, 0x0c30, 0x0c30, 0x0c30, 0x0c30, 0x0c30, 0x0630, 0x07f0, 0x01f0, 0x0000, 0x0000},
    {0x0000, 0x0000, 0x0ff0, 0x0ff0, 0x0030, 0x0030, 0x0030, 0x03f0, 0x03f0, 0x0030, 0x0030, 0x0030, 0x0ff0, 0x0ff0, 0x0000, 0x0000},
    {0x0000, 0x0000, 0x0ff0, 0x0ff0, 0x0030, 0x0030, 0x0030, 0x03f0, 0x03f0, 0x0030, 0x0030, 0x0030, 0x0030, 0x0030, 0x0000, 0x0000},
    {0x0000, 0x0000, 0x0780, 0x0fc0, 0x0ce0, 0x0860, 0x0030, 0x0030, 0x0f30, 0x0e30, 0x0c60, 0x0ce0, 0x0fc0, 0x0780, 0x0000, 0x0000},
    {0x0000, 0x0000, 0x0c30, 0x0c30, 0x0c30, 0x0c30, 0x0c30, 0x0ff0, 0x0ff0, 0x0c30, 0x0c30, 0x0c30, 0x0c30, 0x0c30, 0x0000, 0x0000},
    {0x0000, 0x0000, 0x0078, 0x0030, 0x0030, 0x0030, 0x0030, 0x0030, 0x0030, 0x0030, 0x0030, 0x0030, 0x0030, 0x0078, 0x0000, 0x0000},
    {0x0000, 0x0000, 0x0f00, 0x0600, 0x0600, 0x0600, 0x0600, 0x0600, 0x0600, 0x0600, 0x0620, 0x0660, 0x07e0, 0x03c0, 0x0000, 0x0000},
    {0x0000, 0x0000, 0x0c30, 0x0e30, 0x0730, 0x03b0, 0x01f0, 0x0070, 0x0070, 0x01f0, 0x03b0, 0x0730, 0x0e30, 0x0c30, 0x0000, 0x0000},
    {0x0000, 0x0000, 0x0030, 0x0030, 0x0030, 0x0030, 0x0030, 0x0030, 0x0030, 0x0030, 0x0030, 0x0030, 0x0ff0, 0x0ff0, 0x0000, 0x0000},
    {0x0000, 0x0000, 0x1e78, 0x1ff8, 0x1bd8, 0x1998, 0x1998, 0x1818, 0x1818, 0x1818, 0x1818, 0x1818, 0x1818, 0x1818, 0x0000, 0x0000},
    {0x0000, 0x0000, 0x0c30, 0x0c30, 0x0cf0, 0x0cf0, 0x0db0, 0x0db0, 0x0db0, 0x0db0, 0x0f30, 0x0f30, 0x0c30, 0x0c30, 0x0000, 0x0000},
    {0x0000, 0x0000, 0x0180, 0x03c0, 0x07e0, 0x0e70, 0x0c30, 0x0c30, 0x0c30, 0x0c30, 0x0e70, 0x07e0, 0x03c0, 0x0180, 0x0000, 0x0000},
    {0x0000, 0x0000, 0x01f0, 0x03f0, 0x0630, 0x0630, 0x0630, 0x03f0, 0x01f0, 0x0030, 0x0030, 0x0030, 0x0030, 0x0030, 0x0000, 0x0000},
    {0x0000, 0x0000, 0x0180, 0x03c0, 0x07e0, 0x0e70, 0x0c30, 0x0c30, 0x0c30, 0x0e30, 0x0f70, 0x07e0, 0x0fc0, 0x1d80, 0x1800, 0x0000},
    {0x0000, 0x0000, 0x01f0, 0x03f0, 0x0630, 0x0630, 0x0630, 0x03f0, 0x01f0, 0x01b0, 0x0330, 0x0730, 0x0630, 0x0630, 0x0000, 0x0000},
    {0x0000, 0x0000, 0x03c0, 0x0fe0, 0x0c70, 0x0030, 0x0070, 0x03e0, 0x07c0, 0x0e00, 0x0c00, 0x0e30, 0x07f0, 0x03c0, 0x0000, 0x0000},
    {0x0000, 0x0000, 0x0ff0, 0x0ff0, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0000, 0x0000},
    {0x0000, 0x0000, 0x0c30, 0x0c30, 0x0c30, 0x0c30, 0x0c30, 0x0c30, 0x0c30, 0x0c30, 0x0c30, 0x0660, 0x07e0, 0x03c0, 0x0000, 0x0000},
    {0x0000, 0x0000, 0x0c30, 0x0c30, 0x0c30, 0x0c30, 0x0c30, 0x0c30, 0x0660, 0x0660, 0x03c0, 0x03c0, 0x0180, 0x0180, 0x0000, 0x0000},
    {0x0000, 0x0000, 0x1818, 0x1818, 0x1818, 0x1818, 0x1818, 0x1998, 0x1998, 0x1bd8, 0x1bd8, 0x1ff8, 0x1e78, 0x1818, 0x0000, 0x0000},
    {0x0000, 0x0000, 0x0c30, 0x0c30, 0x0c30, 0x0e70, 0x07e0, 0x03c0, 0x03c0, 0x07e0, 0x0e70, 0x0c30, 0x0c30, 0x0c30, 0x0000, 0x0000},
    {0x0000, 0x0000, 0x0c30, 0x0c30, 0x0c30, 0x0e70, 0x07e0, 0x03c0, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0000, 0x0000},
    {0x0000, 0x0000, 0x0ff0, 0x0ff0, 0x0c00, 0x0e00, 0x0700, 0x0380, 0x01c0, 0x00e0, 0x0070, 0x0030, 0x0ff0, 0x0ff0, 0x0000, 0x0000},
    {0x0000, 0x03e0, 0x03e0, 0x0060, 0x0060, 0x0060, 0x0060, 0x0060, 0x0060, 0x0060, 0x0060, 0x0060, 0x0060, 0x03e0, 0x03e0, 0x0000},
    {0x0000, 0x0060, 0x0060, 0x0060, 0x00e0, 0x00c0, 0x00c0, 0x00c0, 0x0180, 0x0180, 0x0180, 0x0380, 0x0300, 0x0300, 0x0300, 0x0000},
    {0x0000, 0x03e0, 0x03e0, 0x0300, 0x0300, 0x0300, 0x0300, 0x0300, 0x0300, 0x0300, 0x0300, 0x0300, 0x0300, 0x03e0, 0x03e0, 0x0000},
    {0x0000, 0x0180, 0x03c0, 0x07e0, 0x0e70, 0x0c30, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000},
    {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x7ffe, 0x7ffe, 0x0000},
    {0x0000, 0x0180, 0x0180, 0x00c0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000},
    {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0dc0, 0x0fe0, 0x0e70, 0x0c30, 0x0c30, 0x0e70, 0x1fe0, 0x19c0, 0x0000, 0x0000},
    {0x0000, 0x0000, 0x0030, 0x0030, 0x0030, 0x0030, 0x03b0, 0x07f0, 0x0670, 0x0c30, 0x0c30, 0x0670, 0x07f0, 0x03b0, 0x0000, 0x0000},
    {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x01c0, 0x03e0, 0x0670, 0x0030, 0x0030, 0x0670, 0x03e0, 0x01c0, 0x0000, 0x0000},
    {0x0000, 0x0000, 0x0c00, 0x0c00, 0x0c00, 0x0c00, 0x0dc0, 0x0fe0, 0x0e70, 0x0c30, 0x0c30, 0x0e70, 0x0fe0, 0x0dc0, 0x0000, 0x0000},
    {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x03c0, 0x07e0, 0x0660, 0x07f0, 0x03f0, 0x0060, 0x07e0, 0x03c0, 0x0000, 0x0000},
    {0x0000, 0x0000, 0x0700, 0x0780, 0x0180, 0x0180, 0x07e0, 0x07e0, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0000, 0x0000},
    {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0dc0, 0x0fe0, 0x0e60, 0x0e60, 0x0fe0, 0x0dc0, 0x0c00, 0x0e60, 0x07e0, 0x03c0},
    {0x0000, 0x0000, 0x0030, 0x0030, 0x0030, 0x0030, 0x07b0, 0x0ff0, 0x0ef0, 0x0c70, 0x0c30, 0x0c30, 0x0c30, 0x0c30, 0x0000, 0x0000},
    {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x00c0, 0x00c0, 0x0000, 0x00c0, 0x00c0, 0x00c0, 0x00c0, 0x00c0, 0x00c0, 0x0000, 0x0000},
    {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x00c0, 0x00c0, 0x0000, 0x00c0, 0x00c0, 0x00c0, 0x00c0, 0x00c0, 0x00d8, 0x00f8, 0x0070},
    {0x0000, 0x0000, 0x0060, 0x0060, 0x0060, 0x0060, 0x0060, 0x0660, 0x0760, 0x03e0, 0x01e0, 0x01e0, 0x03e0, 0x0760, 0x0000, 0x0000},
    {0x0000, 0x0000, 0x0060, 0x0060, 0x0060, 0x0060, 0x0060, 0x0060, 0x0060, 0x0060, 0x0060, 0x0060, 0x0060, 0x0060, 0x0000, 0x0000},
    {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0670, 0x0ff0, 0x0db0, 0x0db0, 0x0db0, 0x0c30, 0x0c30, 0x0000, 0x0000},
    {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x01d0, 0x03f0, 0x0330, 0x0330, 0x0330, 0x0330, 0x0330, 0x0000, 0x0000},
    {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x03c0, 0x07e0, 0x0660, 0x0660, 0x0660, 0x07e0, 0x03c0, 0x0000, 0x0000},
    {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x03d0, 0x07f0, 0x0670, 0x0670, 0x0670, 0x07f0, 0x03f0, 0x0030, 0x0030},
    {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x1bc0, 0x1fe0, 0x1e60, 0x1e60, 0x1e60, 0x1fe0, 0x1bc0, 0x1800, 0x1800},
    {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x03a0, 0x07e0, 0x04e0, 0x0060, 0x0060, 0x0060, 0x0060, 0x0000, 0x0000},
    {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0380, 0x07c0, 0x04c0, 0x0180, 0x0300, 0x0640, 0x07c0, 0x0380, 0x0000, 0x0000},
    {0x0000, 0x0000, 0x0080, 0x00c0, 0x00c0, 0x03f0, 0x03f0, 0x00c0, 0x00c0, 0x00c0, 0x00c0, 0x00c0, 0x03c0, 0x0380, 0x0000, 0x0000},
    {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0cc0, 0x0cc0, 0x0cc0, 0x0cc0, 0x0cc0, 0x0fc0, 0x0b80, 0x0000, 0x0000},
    {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0660, 0x0660, 0x0660, 0x0660, 0x07e0, 0x03c0, 0x0180, 0x0000, 0x0000},
    {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0c30, 0x0c30, 0x0db0, 0x0db0, 0x0ff0, 0x0e70, 0x0c30, 0x0000, 0x0000},
    {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0660, 0x0660, 0x03c0, 0x0180, 0x03c0, 0x0660, 0x0660, 0x0000, 0x0000},
    {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0660, 0x0660, 0x07e0, 0x03c0, 0x0180, 0x0180, 0x01c0, 0x00e0, 0x0060},
    {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x07e0, 0x07e0, 0x0300, 0x0180, 0x00c0, 0x07e0, 0x07e0, 0x0000, 0x0000},
    {0x0000, 0x0700, 0x0380, 0x0180, 0x0180, 0x01c0, 0x00c0, 0x0060, 0x0060, 0x00c0, 0x01c0, 0x0180, 0x0180, 0x0380, 0x0700, 0x0000},
    {0x0000, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0000},
    {0x0000, 0x00e0, 0x01c0, 0x0180, 0x0180, 0x0380, 0x0300, 0x0600, 0x0600, 0x0300, 0x0380, 0x0180, 0x0180, 0x01c0, 0x00e0, 0x0000},
    {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0060, 0x19f8, 0x1f98, 0x0600, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000},
    {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000}
};

int CharToHex(const char c) {
    return c >= '0' && c <= '9' ? c - '0' : (c >= 'A' && c <= 'F' ? (c - 'A') + 10 : (c >= 'a' && c <= 'f' ? (c - 'a') + 10 : -1));
}

uint32_t LoadShader(const char* src, uint32_t type) {
    uint32_t shader = glCreateShader(type);
    glShaderSource(shader, 1, &src, nullptr);
    glCompileShader(shader);

    return shader;
}

void InitUI() {
    gShaderProgram = glCreateProgram();
    glAttachShader(gShaderProgram, LoadShader(gVertexShader, GL_VERTEX_SHADER));
    glAttachShader(gShaderProgram, LoadShader(gFragmentShader, GL_FRAGMENT_SHADER));
    glLinkProgram(gShaderProgram);

    glGenVertexArrays(1, &gVertexArray);
    glBindVertexArray(gVertexArray);

    glGenBuffers(1, &gVertexBuffer);
    glGenBuffers(1, &gColorBuffer);

    glBindBuffer(GL_ARRAY_BUFFER, gVertexBuffer);
    glVertexAttribPointer(0, 2, GL_FLOAT, 0, 0, nullptr);
    glEnableVertexAttribArray(0);
    glBindBuffer(GL_ARRAY_BUFFER, gColorBuffer);
    glVertexAttribPointer(1, 4, GL_FLOAT, 0, 0, nullptr);
    glEnableVertexAttribArray(1);

    glBindVertexArray(0);
}

float __ConvScrWidth(uint32_t value) {
    return (value / (float)gWindowWidth) * 2.0f - 1.0f;
}

float __ConvScrHeight(uint32_t value) {
    return ((value / (float)gWindowHeight) * 2.0f - 1.0f) * -1.0f;
}

void __BindUI(float* vertices, float* colors, uint32_t pointsAmount) {
    glBindVertexArray(gVertexArray);

    glBindBuffer(GL_ARRAY_BUFFER, gVertexBuffer);
    glBufferData(GL_ARRAY_BUFFER, sizeof(float) * pointsAmount * 2, vertices, GL_DYNAMIC_DRAW);

    glBindBuffer(GL_ARRAY_BUFFER, gColorBuffer);
    glBufferData(GL_ARRAY_BUFFER, sizeof(float) * pointsAmount * 4, colors, GL_DYNAMIC_DRAW);

    glBindVertexArray(0);
}

void __DrawUI(uint32_t mode, uint32_t count) {
    glUseProgram(gShaderProgram);
    glBindVertexArray(gVertexArray);

    glDrawArrays(mode, 0, count);

    glBindVertexArray(0);
    glUseProgram(0);
}

void __DrawSquare(float x, float y, float sx, float sy, float r, float g, float b) {
    float vertices[12] = {
        x + sx, y + sy,
        x - sx, y + sy,
        x + sx, y - sy,
        x - sx, y + sy,
        x + sx, y - sy,
        x - sx, y - sy
    };

    float color[24] = {
        r, g, b, 1.0f,
        r, g, b, 1.0f,
        r, g, b, 1.0f,
        r, g, b, 1.0f,
        r, g, b, 1.0f,
        r, g, b, 1.0f
    };

    __BindUI(vertices, color, 6);
    __DrawUI(GL_TRIANGLES, 6);
}

void TextUI(std::string text, uint32_t posx, uint32_t posy, uint32_t pointSize = 1, uint16_t spaceingX = 9, uint16_t spaceingY = 18) {
    std::vector<float> vertices;
    std::vector<float> colors;

    float pixelX = (1.0f / (float)gWindowWidth) * pointSize * 2.0f;
    float pixelY = (1.0f / (float)gWindowHeight) * pointSize * 2.0f;
    int pxOffsetX = 0, pxOffsetY = 0;
    int offsetX = 0, offsetY = 0;
    bool x1b_found = false;
    bool color_char_found = false;
    int color_counter = 0;

    uint8_t rval = 255;
    uint8_t gval = 255;
    uint8_t bval = 255;

    for(char c : text) {
        pxOffsetY = offsetY;

        if(c == '\n') {
            offsetX = 0;
            offsetY -= spaceingY;

            continue;
        }

        if(c == '\t') {
            offsetX += spaceingX * 2;

            continue;
        }

        if(c == '\x1b') {
            x1b_found = true;

            continue;
        }

        if(c == '[' && x1b_found) {
            color_char_found = true;
            color_counter = 6;

            continue;
        }
        else if(c != '[' && !x1b_found) {
            x1b_found = false;
        }

        if(x1b_found && color_char_found && color_counter == 6) {
            rval = ((uint8_t)CharToHex(c) << 4);
            color_counter--;

            continue;
        }

        if(x1b_found && color_char_found && color_counter == 5) {
            rval |= (uint8_t)CharToHex(c);
            color_counter--;

            continue;
        }

        if(x1b_found && color_char_found && color_counter == 4) {
            gval = ((uint8_t)CharToHex(c) << 4);
            color_counter--;

            continue;
        }

        if(x1b_found && color_char_found && color_counter == 3) {
            gval |= (uint8_t)CharToHex(c);
            color_counter--;

            continue;
        }

        if(x1b_found && color_char_found && color_counter == 2) {
            bval = ((uint8_t)CharToHex(c) << 4);
            color_counter--;

            continue;
        }

        if(x1b_found && color_char_found && color_counter == 1) {
            bval |= (uint8_t)CharToHex(c);
            color_counter--;

            continue;
        }

        if(x1b_found && color_char_found && color_counter <= 0) {
            x1b_found = false;
            color_char_found = false;
            color_counter = 0;
        }

        for(int y = 0; y < 16; y++) {
            pxOffsetX = offsetX;

            for(int x = 0; x < 16; x++) {
                if(gDefaultFont[c - ' '][y] & (1 << x)) {
                    vertices.push_back(__ConvScrWidth(posx) + (pixelX * pxOffsetX));
                    vertices.push_back(__ConvScrHeight(posy) + (pixelY * pxOffsetY));
                    colors.push_back(rval / 255.0f);
                    colors.push_back(gval / 255.0f);
                    colors.push_back(bval / 255.0f);
                    colors.push_back(1.0f);
                }

                pxOffsetX++;
            }

            pxOffsetY--;
        }

        offsetX += spaceingX;
    }

    __BindUI(vertices.data(), colors.data(), vertices.size() / 2);
    glPointSize((float)pointSize);
    __DrawUI(GL_POINTS, vertices.size() / 2);
    glPointSize(1);
}

bool ButtonUI(std::string text, uint32_t x, uint32_t y, uint32_t sx, uint32_t sy, uint32_t pointSize = 1, uint16_t spaceingX = 9, uint16_t spaceingY = 18) {
    if(x - sx <= gMouseX && x + sx >= gMouseX && y - sy <= gMouseY && y + sy >= gMouseY && !gMouseLeftClicked) {
        __DrawSquare(__ConvScrWidth(x), __ConvScrHeight(y), (float)sx / ((float)gWindowWidth / 2.0f), (float)sy / ((float)gWindowHeight / 2.0f), (gButtonColor[0] - 32) / 255.0f, (gButtonColor[1] - 32) / 255.0f, (gButtonColor[2] - 32) / 255.0f);
    }
    else if(x - sx <= gMouseX && x + sx >= gMouseX && y - sy <= gMouseY && y + sy >= gMouseY && gMouseLeftClicked) {
        __DrawSquare(__ConvScrWidth(x), __ConvScrHeight(y), (float)sx / ((float)gWindowWidth / 2.0f), (float)sy / ((float)gWindowHeight / 2.0f), (gButtonColor[0] - 64) / 255.0f, (gButtonColor[1] - 64) / 255.0f, (gButtonColor[2] - 64) / 255.0f);
    }
    else {
        __DrawSquare(__ConvScrWidth(x), __ConvScrHeight(y), (float)sx / ((float)gWindowWidth / 2.0f), (float)sy / ((float)gWindowHeight / 2.0f), gButtonColor[0] / 255.0f, gButtonColor[1] / 255.0f, gButtonColor[2] / 255.0f);
    }

    TextUI(text, x - (sx / 2), y - sy + 1, pointSize, spaceingX, spaceingY);

    return true;
}

#endif